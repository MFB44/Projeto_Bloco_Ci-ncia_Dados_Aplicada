import streamlit as st
import pandas as pd
import requests
from bs4 import BeautifulSoup as bs

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import AgentExecutor, ConversationalAgent
from langchain.memory import ConversationBufferMemory
from langchain.chains import LLMChain
from langchain_community.chat_message_histories import StreamlitChatMessageHistory
from langchain_community.tools import WikipediaQueryRun
from langchain_community.utilities import WikipediaAPIWrapper
from dotenv import load_dotenv
import os
from google.cloud.bigquery.client import Client

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = r'app\data\core-shard-442902-h7-3fded6207039.json'
bq_client = Client()

st.set_page_config(page_title='FieldGuide', page_icon='üìö', layout='centered', initial_sidebar_state='auto')

st.sidebar.header("Bem-vindo ao FieldGuide!")
st.sidebar.image("https://i.imgur.com/mlvt8or.png", use_column_width=True)
st.sidebar.write("### Selecione a p√°gina desejada:")
page = st.sidebar.selectbox("", ["Introdu√ß√£o (TP1)","Dados (TP2)", "BeautifulSoup (TP2)", "TP3 - Selenium, FastAPI, LLM", "App"])

@st.cache_data
def read_csv(file):
    data = pd.read_csv(file, sep=';')
    return data

if page == "Introdu√ß√£o (TP1)":
    st.image("https://i.imgur.com/9SCBoG5.png", width=650)
    st.markdown("# Field Guide")
    st.markdown("## O Guia de Campo para sua Carreira")

    st.write("")

    st.write("Aplica√ß√£o que acumula todas as informa√ß√µes para te ajudar a planejar sua vida profissional, mostrando cargos, habilidades necess√°rias para exerc√™-los e cursos superiores.")
    st.write("Este projeto procura ajudar principalmente alunos do Ensino M√©dio, que assim como eu, estavam confusos com seu futuro e ficaram dias procurando informa√ß√µes sobre suas poss√≠veis carreiras futuras.")
    st.write("Nele voc√™ entra e pesquisa por uma proffis√£o e encontra tudo que voc√™ pode precisar para trabalhar na √°rea.")

    st.image(r"app\data\Beige Modern Chic Business Model Canvas Brainstorm.png")
    st.image(r"app\data\Project Charter - Projeto Bloco Ci√™ncia de Dados Aplicada-1.png")

    st.markdown("### Links:")
    st.markdown("#### Inspira√ß√£o Principal")
    st.write("[Mapa de Carreiras](https://www.vagas.com.br/mapa-de-carreiras/)")
    st.markdown("#### Poss√≠veis Fontes de Dados")
    st.write("[API Feed de Vagas](https://apifeeddevagas.docs.apiary.io/#reference/0/feed-de-vagas/feed-de-vagas)")
    st.write("[Cadastro Nacional de Cursos Superiores](https://emec.mec.gov.br/emec/nova)")
    st.write("[API Profiss√µes](https://api.sienge.com.br/docs/html-files/professions-v1.html#/)")
    st.write("[Tabela de Pontos Sisu](https://www.guiadacarreira.com.br/blog/tabela-de-pontos-do-enem-para-cada-curso)")
    st.write("[Catho](https://www.catho.com.br/vagas/)")
    st.write("[Vagas.com](https://www.vagas.com.br)")

    file = (r'app\data\relatorio_consulta_publica_avancada_curso_25_08_2024_00_05_33.csv')
    data = read_csv(file)

    st.markdown("### Exemplo de tabela de dados:")
    st.write("O exemplo a seguir utiliza uma tabela vinda do site citado acima (Cadastro Nacional de Cursos Superiores), ela mostra apenas cursos de 'Dados' e os dados n√£o foram tratados, portanto h√° diversas colunas que n√£o ser√£o utilizadas no projeto final. Eu pretendo ampliar estes dados para todo o Brasil e utilizar APIs, por√©m ainda n√£o consegui fazer funcionar mas estou trabalhando em me capacitar para tal.")
    dataframe = st.dataframe(data)

if page == "Dados (TP2)":
    st.title("Dados Relat√≥rio Consulta P√∫blica Avan√ßada Curso")
    file = (r'app\data\relatorio_consulta_publica_avancada_curso_25_08_2024_00_05_33.csv')
    data = read_csv(file)
    dataframe = st.dataframe(data)
    if 'complete' not in st.session_state:
        st.session_state['complete'] = dataframe
    st.download_button(
        label="Baixar dados completos",
        data=data.to_csv(index=False).encode('utf-8'),
        file_name='dados_completos.csv',
        mime='text/csv'
    )
    cols = list(data.columns)
    colunas = st.multiselect("Mostrar colunas", cols)
    if colunas:
        display = data[colunas]
        if 'multi' not in st.session_state:
            st.session_state['multi'] = display
        st.write(display)
        st.download_button(
            label="Baixar dados",
            data=display.to_csv(index=False).encode('utf-8'),
            file_name='dados.csv',
            mime='text/csv'
        )

    uploaded_file = st.file_uploader("Escolha um arquivo", type=["csv", "xlsx", "json"])
    if uploaded_file is not None:
        file_type = uploaded_file.name.split('.')[-1]
        if file_type == 'csv':
            data_u = pd.read_csv(uploaded_file)
        elif file_type == 'xlsx':
            data_u = pd.read_excel(uploaded_file)
        elif file_type == 'json':
            data_u = pd.read_json(uploaded_file)
        else:
            st.error("Tipo de arquivo n√£o suportado!")
            data_u = None
        
        if data_u is not None:
            st.dataframe(data_u)
            st.download_button(
                label="Baixar dados Upload",
                data=data_u.to_csv(index=False).encode('utf-8'),
                file_name='uploaded.csv',
                mime='text/csv'
            )
            if 'uploaded' not in st.session_state:
                st.session_state['uploaded'] = data_u

if page == "BeautifulSoup (TP2)":
    st.title("Aqui voc√™ pode encontrar todas as profiss√µes dispon√≠veis no site Quero Bolsa, organizadas por letra.")
    HEADER = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
    }
    resp = requests.get("https://querobolsa.com.br/carreiras-e-profissoes/todas", headers=HEADER, timeout=30)
    soup = bs(resp.content, 'html.parser')
    profissoes = soup.find_all('a', class_='z-link')
    profs = []
    for profissao in profissoes:
        profs.append(profissao.text)

    profs_at = profs[50:955]
    profs_at = [prof.strip().replace('\n', '') for prof in profs_at]
    for element in profs_at:
        if element == '':
            profs_at.remove(element)
    alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
    
    sel_let = st.selectbox("Profiss√µes por letra", alphabet)
                   
    st.markdown("---")
    st.markdown("#### (Role para ver todas)")
    st.markdown(
        f"<div style='height: 300px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px;'>{''.join([f'<p>{prof}</p>' for prof in profs_at if prof[0] == sel_let])}</div>",
        unsafe_allow_html=True
    )
    st.download_button(
        label="Baixar profiss√µes",
        data='\n'.join(profs_at).encode('utf-8'),
        file_name='profiss√µes.txt',
        mime='text/plain'
    )

    profs_at = profs_at
    if 'professions' not in st.session_state:
        st.session_state['professions'] = profs_at
    with open(r'app\data\professions.txt','w') as f:
        for item in profs_at:
            f.write(item + '\n')
            
if page == "TP3 - Selenium, FastAPI, LLM":
    st.title("TP3 - Selenium, FastAPI, LLM")
    st.write("Esta parte do trabalho n√£o √© t√£o grande quanto as √∫ltimas. N√£o obtive √™xito ap√≥s testar em alguns sites diferentes, por√©m quero demonstrar que tenho interesse em utiliz√°-lo para coletar dados de sites como 'vagas.com.br' e 'catho.com.br'.")
    st.write("Com isso eu poderia coletar dados de vagas de emprego e sal√°rios, por exemplo, e disponibilizar para o usu√°rio juntamente dos cursos. Com isto, j√° correlaciono ao uso de IA, possivelmente fazendo textos que explicam detalhes e como se relacionam cada vaga com certos cursos.")
    st.write("Com o conhecimento que ganharei neste trimestre e com o que j√° aprendi, pretendo fazer um projeto mais robusto e completo, com mais funcionalidades e informa√ß√µes.")
    st.write("Sobre o FastAPI, eu n√£o consegui implementar nada ainda, mas pretendo utiliz√°-lo para criar uma API que disponibilize todos dados que coletarei.")
    st.write("Esperava fazer mais nesta etapa mas apenas tive uma aula sobre as funcionalidades da FastAPI e n√£o pratiquei com Selenium mas a proposta de neg√≥cio est√° mais clara para mim e estou mais confiante para fazer um projeto mais completo.")
    st.write("Novas pastas foram inclusas ('FastAPI' e 'Selenium' na pasta 'services') com os prot√≥tipos de c√≥digo que eu pretendo utilizar.")
    st.write("Exemplos de como demonstrar dados no projeto tirados do Mapa VAGAS de Carreiras:")

    col1, col2 = st.columns(2)
    with col1:
        st.image('https://i.imgur.com/Y5wA5nY.png')
    with col2:
        st.image('https://i.imgur.com/x0q8RvQ.png')

api_wrapper = WikipediaAPIWrapper(top_k_results=1, doc_content_chars_max=100)
tools = [WikipediaQueryRun(name="Wikipedia", description="Searches Wikipedia for information", api_wrapper=api_wrapper,)]
    

prefix = """
        Voc√™ deve apenas trabalhar em Portugu√™s Brasileiro. Voc√™ √© a I.A do FieldGuide, um sistema criado para dar informa√ß√µes de carreira para os usu√°rios.
         Considere que voc√™ receber√° um curso ou profiss√£o de entrada e dever√° retornar informa√ß√µes sobre ele.
         No caso de um curso, informe quais profiss√µes s√£o poss√≠veis a partir deste curso, e no caso contr√°rio, quais cursos levam √† tal profiss√£o escolhida.
         Caso hajam mais de uma op√ß√£o de resposta, informe todos ao usu√°rio.
         Voc√™ tem acesso √† ferramenta de pesquisa na Wikipedia, portanto, utilize-a para buscar informa√ß√µes sobre o que foi perguntado.
         Se n√£o souber a resposta, informe ao usu√°rio que n√£o encontrou informa√ß√µes sobre o que foi perguntado. Seja educado, prestativo e formal sempre.
        """

suffix = """
Chat History:
{chat_history}
Latest Question: {input}
{agent_scratchpad}
"""
prompt = ConversationalAgent.create_prompt(
    tools,
    prefix = prefix,
    suffix = suffix,
    input_variables = {"input", "chat_history", "agent_scratchpad"}
)

msg = StreamlitChatMessageHistory()
if "memory" not in st.session_state:
    st.session_state["memory"] = ConversationBufferMemory(
        messages = msg,
        memory_key = "chat_history",
        return_messages=True
    )
memory = st.session_state["memory"]

llm_chain = LLMChain(
    llm = ChatGoogleGenerativeAI(temperature=0.5, model="gemini-1.5-pro", api_key=GEMINI_API_KEY),
    prompt=prompt
)

agent = ConversationalAgent(
    llm_chain=llm_chain,
    memory=memory,
    max_interactions=10,
    tools = tools
)

agent_executor = AgentExecutor(agent=agent, memory=memory, tools=tools)

if page == "App":
    t1, t2 = st.tabs(["Introdu√ß√£o", "Chat Interativo"])
    with t1:
        st.header("Aqui come√ßa o aplicativo FieldGuide em sua forma final!")
        st.write("Este aplicativo foi feito para ajudar voc√™ a escolher sua carreira, mostrando cursos superiores e profiss√µes que voc√™ pode seguir.")
        st.write("Primeiramente escolha um curso ou profiss√£o de interesse e depois converse com nossa IA interativa para saber mais sobre o assunto.")
        all_courses = [
            "Administra√ß√£o",
            "Administra√ß√£o P√∫blica",
            "Agroecologia",
            "Agroneg√≥cio",
            "Agronomia",
            "An√°lise de Sistemas",
            "Antropologia",
            "Arquitetura e Urbanismo",
            "Arquivologia",
            "Artes",
            "Artes C√™nicas",
            "Astronomia",
            "Biblioteconomia",
            "Biologia",
            "Biomedicina",
            "Bioqu√≠mica",
            "Canto",
            "Cenografia",
            "Ci√™ncia da Computa√ß√£o",
            "Ci√™ncias Biol√≥gicas",
            "Ci√™ncias Cont√°beis",
            "Ci√™ncias Econ√¥micas",
            "Ci√™ncias Sociais",
            "Cinema e Audiovisual",
            "Composi√ß√£o e Reg√™ncia",
            "Computa√ß√£o",
            "Comunica√ß√£o e Marketing",
            "Comunica√ß√£o Social",
            "Desenho Industrial",
            "Design",
            "Design de Ambientes",
            "Design de Games",
            "Design de Interiores",
            "Design de Moda",
            "Design de Produto",
            "Design Digital",
            "Design Gr√°fico",
            "Dire√ß√£o",
            "Direito",
            "Educa√ß√£o F√≠sica",
            "Enfermagem",
            "Engenharia Ac√∫stica",
            "Engenharia Aeroespacial",
            "Engenharia Aeron√°utica",
            "Engenharia Agr√≠cola",
            "Engenharia Agroindustrial",
            "Engenharia Agron√¥mica",
            "Engenharia Ambiental",
            "Engenharia Automotiva",
            "Engenharia Bioenerg√©tica",
            "Engenharia Biom√©dica",
            "Engenharia Bioqu√≠mica",
            "Ofertas Bacharelado em Direito",
            "Engenharia Biotecnol√≥gica",
            "Engenharia Cartogr√°fica",
            "Engenharia Civil",
            "Engenharia da Computa√ß√£o",
            "Engenharia da Mobilidade",
            "Engenharia de Agrimensura",
            "Engenharia de Agroneg√≥cios",
            "Engenharia de Alimentos",
            "Engenharia de Aquicultura",
            "Engenharia de Automa√ß√£o",
            "Engenharia de Bioprocessos",
            "Engenharia de Biossistemas",
            "Engenharia de Biotecnologia",
            "Engenharia de Energia",
            "Engenharia de Gest√£o",
            "Engenharia de Informa√ß√£o",
            "Engenharia de Instrumenta√ß√£o, Automa√ß√£o e Rob√≥tica",
            "Engenharia de Manufatura",
            "Engenharia de Materiais",
            "Engenharia de Minas",
            "Engenharia de Pesca",
            "Engenharia de Petr√≥leo",
            "Engenharia de Produ√ß√£o",
            "Engenharia de Recursos H√≠dricos",
            "Engenharia de Sa√∫de e Seguran√ßa",
            "Engenharia de Sistemas",
            "Engenharia de Software",
            "Engenharia de Telecomunica√ß√µes",
            "Engenharia de Transporte e Log√≠stica",
            "Engenharia El√©trica",
            "Engenharia Eletr√¥nica",
            "Engenharia em Sistemas Digitais",
            "Engenharia Ferrovi√°ria e Metrovi√°ria",
            "Engenharia F√≠sica",
            "Engenharia Florestal",
            "Engenharia Geol√≥gica",
            "Engenharia H√≠drica",
            "Engenharia Industrial",
            "Engenharia Mec√¢nica",
            "Engenharia Mecatr√¥nica",
            "Engenharia Metal√∫rgica",
            "Engenharia Naval",
            "Engenharia Qu√≠mica",
            "Engenharia T√™xtil",
            "Estat√≠stica",
            "Farm√°cia",
            "Filosofia",
            "F√≠sica",
            "Fisioterapia",
            "Fonoaudiologia",
            "Geografia",
            "Gest√£o Ambiental",
            "Gest√£o da Informa√ß√£o",
            "Gest√£o de Pol√≠ticas P√∫blicas",
            "Gest√£o de Servi√ßos de Sa√∫de",
            "Gest√£o do Agroneg√≥cio",
            "Gest√£o P√∫blica",
            "Hist√≥ria",
            "Hotelaria",
            "Jornalismo",
            "Letras",
            "Marketing",
            "Matem√°tica",
            "Mec√¢nica Industrial",
            "Medicina",
            "Medicina Veterin√°ria",
            "Moda",
            "M√∫sica",
            "Nutri√ß√£o",
            "Odontologia",
            "Pedagogia",
            "Pol√≠ticas P√∫blicas",
            "Propaganda e Marketing",
            "Psicologia",
            "Publicidade e Propaganda",
            "Qu√≠mica",
            "R√°dio, TV e Internet",
            "Rela√ß√µes Internacionais",
            "Rela√ß√µes P√∫blicas",
            "Secretariado Executivo",
            "Servi√ßo Social",
            "Sistemas de Informa√ß√£o",
            "Tecnologias Digitais",
            "Teologia",
            "Terapia Ocupacional",
            "Tradutor e Int√©rprete",
            "Turismo",
            "Zootecnia"
        ]
        selected_course = st.selectbox("Veja todos os cursos", all_courses)
        profs_at = st.session_state['professions']
        alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
        sel_let = st.selectbox("Profiss√µes por letra", alphabet)
        if sel_let:
            st.markdown(
                f"<div style='height: 300px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px;'>{''.join([f'<p>{prof}</p>' for prof in profs_at if prof[0] == sel_let])}</div>",
                unsafe_allow_html=True
            )

    with t2:
        st.header("Converse com nossa IA Interativa!")
        query = st.text_input("N√£o se esque√ßa de inform√°-la de seu curso ou profiss√£o de interesse!", placeholder="Digite aqui...")
        if query:
            with st.spinner("Aguarde..."):
                result = agent_executor.run(query)
                st.info(result, icon="ü§ñ")
        